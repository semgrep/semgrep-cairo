(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_cairo"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "integer", None;
  "modifier_ref", None;
  "binary", None;
  "wildcard", None;
  "hex", None;
  "ellipsis", None;
  "modifier_mut", None;
  "false", None;
  "true", None;
  "pat_7fdeb71", None;
  "unit", None;
  "unit_type", None;
  "number_suffix", None;
  "comment", None;
  "semgrep_var", None;
  "string", None;
  "octal", None;
  "path",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Repeat (
        Seq [
          Token (Literal "::");
          Alt [|
            Token (Name "pat_7fdeb71");
            Token (Name "semgrep_var");
          |];
        ];
      );
      Opt (
        Token (Literal "::");
      );
    ];
  );
  "number",
  Some (
    Seq [
      Alt [|
        Token (Name "integer");
        Token (Name "hex");
        Token (Name "octal");
        Token (Name "binary");
      |];
      Opt (
        Token (Name "number_suffix");
      );
    ];
  );
  "import_declaration",
  Some (
    Seq [
      Token (Literal "use");
      Token (Name "path");
      Opt (
        Seq [
          Token (Literal "as");
          Alt [|
            Token (Name "pat_7fdeb71");
            Token (Name "semgrep_var");
          |];
        ];
      );
      Token (Literal ";");
    ];
  );
  "type_argument_list",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Token (Name "true");
        Token (Name "false");
        Token (Name "number");
        Token (Name "string");
        Token (Name "unit");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "attribute_argument",
  Some (
    Alt [|
      Alt [|
        Token (Name "true");
        Token (Name "false");
        Token (Name "number");
        Token (Name "string");
        Token (Name "unit");
      |];
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Seq [
        Token (Name "path");
        Token (Literal ":");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
      ];
      Seq [
        Token (Name "path");
        Token (Literal ":");
        Token (Name "attribute_argument_list");
      ];
      Token (Name "ellipsis");
    |];
  );
  "attribute_argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "attribute_argument");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "attribute_argument");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "qualified_name_segment",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_argument_list");
      );
    ];
  );
  "attribute",
  Some (
    Seq [
      Token (Name "path");
      Opt (
        Token (Name "attribute_argument_list");
      );
    ];
  );
  "qualified_name",
  Some (
    Seq [
      Repeat (
        Seq [
          Token (Name "qualified_name_segment");
          Token (Literal "::");
        ];
      );
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Seq [
          Token (Literal "::");
          Token (Name "type_argument_list");
        ];
      );
    ];
  );
  "attribute_list",
  Some (
    Seq [
      Token (Literal "#");
      Token (Literal "[");
      Repeat1 (
        Token (Name "attribute");
      );
      Token (Literal "]");
    ];
  );
  "type_identifier",
  Some (
    Seq [
      Token (Name "qualified_name");
      Opt (
        Token (Name "type_parameters");
      );
    ];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "<");
      Repeat (
        Seq [
          Alt [|
            Token (Name "type_tuple");
            Token (Name "unit_type");
            Token (Name "type_identifier");
          |];
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Token (Name "type_tuple");
          Token (Name "unit_type");
          Token (Name "type_identifier");
        |];
      );
      Token (Literal ">");
    ];
  );
  "type_tuple",
  Some (
    Seq [
      Token (Literal "(");
      Repeat (
        Seq [
          Alt [|
            Token (Name "type_tuple");
            Token (Name "unit_type");
            Token (Name "type_identifier");
          |];
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Token (Name "type_tuple");
          Token (Name "unit_type");
          Token (Name "type_identifier");
        |];
      );
      Token (Literal ")");
    ];
  );
  "pattern_enum",
  Some (
    Seq [
      Token (Name "qualified_name");
      Token (Literal "(");
      Alt [|
        Alt [|
          Token (Name "wildcard");
          Alt [|
            Token (Name "pat_7fdeb71");
            Token (Name "semgrep_var");
          |];
        |];
        Token (Name "pattern_struct");
        Token (Name "pattern_enum");
        Token (Name "pattern_tuple");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Alt [|
              Token (Name "wildcard");
              Alt [|
                Token (Name "pat_7fdeb71");
                Token (Name "semgrep_var");
              |];
            |];
            Token (Name "pattern_struct");
            Token (Name "pattern_enum");
            Token (Name "pattern_tuple");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "pattern_struct",
  Some (
    Seq [
      Token (Name "qualified_name");
      Token (Literal "{");
      Alt [|
        Alt [|
          Token (Name "pat_7fdeb71");
          Token (Name "semgrep_var");
        |];
        Seq [
          Alt [|
            Token (Name "pat_7fdeb71");
            Token (Name "semgrep_var");
          |];
          Token (Literal ":");
          Alt [|
            Alt [|
              Token (Name "wildcard");
              Alt [|
                Token (Name "pat_7fdeb71");
                Token (Name "semgrep_var");
              |];
            |];
            Token (Name "pattern_struct");
            Token (Name "pattern_enum");
            Token (Name "pattern_tuple");
          |];
        ];
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Alt [|
              Token (Name "pat_7fdeb71");
              Token (Name "semgrep_var");
            |];
            Seq [
              Alt [|
                Token (Name "pat_7fdeb71");
                Token (Name "semgrep_var");
              |];
              Token (Literal ":");
              Alt [|
                Alt [|
                  Token (Name "wildcard");
                  Alt [|
                    Token (Name "pat_7fdeb71");
                    Token (Name "semgrep_var");
                  |];
                |];
                Token (Name "pattern_struct");
                Token (Name "pattern_enum");
                Token (Name "pattern_tuple");
              |];
            ];
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "pattern_tuple",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Alt [|
          Token (Name "wildcard");
          Alt [|
            Token (Name "pat_7fdeb71");
            Token (Name "semgrep_var");
          |];
        |];
        Token (Name "pattern_struct");
        Token (Name "pattern_enum");
        Token (Name "pattern_tuple");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Alt [|
              Token (Name "wildcard");
              Alt [|
                Token (Name "pat_7fdeb71");
                Token (Name "semgrep_var");
              |];
            |];
            Token (Name "pattern_struct");
            Token (Name "pattern_enum");
            Token (Name "pattern_tuple");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "parameter_declaration",
  Some (
    Alt [|
      Seq [
        Repeat (
          Alt [|
            Token (Name "modifier_ref");
            Token (Name "modifier_mut");
          |];
        );
        Alt [|
          Token (Name "pat_7fdeb71");
          Token (Name "semgrep_var");
        |];
        Token (Literal ":");
        Alt [|
          Token (Name "type_tuple");
          Token (Name "unit_type");
          Token (Name "type_identifier");
        |];
      ];
      Token (Name "ellipsis");
    |];
  );
  "type_impl_declaration",
  Some (
    Seq [
      Token (Literal "impl");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Token (Literal ":");
      Alt [|
        Token (Name "type_tuple");
        Token (Name "unit_type");
        Token (Name "type_identifier");
      |];
    ];
  );
  "type_const_declaration",
  Some (
    Seq [
      Token (Literal "const");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Token (Literal ":");
      Alt [|
        Token (Name "type_tuple");
        Token (Name "unit_type");
        Token (Name "type_identifier");
      |];
    ];
  );
  "member_declaration",
  Some (
    Alt [|
      Seq [
        Repeat (
          Token (Name "attribute_list");
        );
        Alt [|
          Token (Name "pat_7fdeb71");
          Token (Name "semgrep_var");
        |];
        Token (Literal ":");
        Alt [|
          Token (Name "type_tuple");
          Token (Name "unit_type");
          Token (Name "type_identifier");
        |];
      ];
      Token (Name "ellipsis");
    |];
  );
  "argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Repeat (
        Seq [
          Alt [|
            Token (Name "tuple_expression");
            Token (Name "block");
            Token (Name "unary_expression");
            Token (Name "binary_expression");
            Token (Name "if_expression");
            Token (Name "loop_expression");
            Token (Name "match_expression");
            Token (Name "selector_expression");
            Token (Name "call_expression");
            Token (Name "qualified_name");
            Alt [|
              Token (Name "true");
              Token (Name "false");
              Token (Name "number");
              Token (Name "string");
              Token (Name "unit");
            |];
            Token (Name "ellipsis");
            Token (Name "deep_ellipsis");
          |];
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      );
      Token (Literal ")");
    ];
  );
  "assignment_statement",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "pat_7fdeb71");
          Token (Name "semgrep_var");
        |];
        Token (Name "wildcard");
      |];
      Alt [|
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "=");
      |];
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Literal ";");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
          Token (Literal "%");
        |];
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
        |];
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal "<");
          Token (Literal "<=");
          Token (Literal ">");
          Token (Literal ">=");
        |];
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Token (Literal "&&");
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Token (Literal "||");
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      ];
    |];
  );
  "block",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Seq [
          Alt [|
            Token (Name "let_statement");
            Token (Name "assignment_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "if_expression");
            Token (Name "loop_expression");
            Token (Name "match_expression");
            Seq [
              Alt [|
                Token (Name "tuple_expression");
                Token (Name "block");
                Token (Name "unary_expression");
                Token (Name "binary_expression");
                Token (Name "if_expression");
                Token (Name "loop_expression");
                Token (Name "match_expression");
                Token (Name "selector_expression");
                Token (Name "call_expression");
                Token (Name "qualified_name");
                Alt [|
                  Token (Name "true");
                  Token (Name "false");
                  Token (Name "number");
                  Token (Name "string");
                  Token (Name "unit");
                |];
                Token (Name "ellipsis");
                Token (Name "deep_ellipsis");
              |];
              Token (Literal ";");
            ];
            Token (Name "ellipsis");
            Token (Name "deep_ellipsis");
          |];
        ];
      );
      Opt (
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      );
      Token (Literal ";");
    ];
  );
  "call_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Name "argument_list");
    ];
  );
  "deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Literal "...>");
    ];
  );
  "if_expression",
  Some (
    Seq [
      Token (Literal "if");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Name "block");
      Opt (
        Seq [
          Token (Literal "else");
          Alt [|
            Token (Name "if_expression");
            Token (Name "block");
          |];
        ];
      );
    ];
  );
  "let_statement",
  Some (
    Seq [
      Token (Literal "let");
      Opt (
        Token (Name "modifier_mut");
      );
      Alt [|
        Alt [|
          Token (Name "wildcard");
          Alt [|
            Token (Name "pat_7fdeb71");
            Token (Name "semgrep_var");
          |];
        |];
        Token (Name "pattern_struct");
        Token (Name "pattern_enum");
        Token (Name "pattern_tuple");
      |];
      Opt (
        Seq [
          Token (Literal ":");
          Alt [|
            Token (Name "type_tuple");
            Token (Name "unit_type");
            Token (Name "type_identifier");
          |];
        ];
      );
      Token (Literal "=");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Literal ";");
    ];
  );
  "loop_expression",
  Some (
    Seq [
      Token (Literal "loop");
      Token (Name "block");
    ];
  );
  "match_case",
  Some (
    Seq [
      Alt [|
        Alt [|
          Alt [|
            Token (Name "wildcard");
            Alt [|
              Token (Name "pat_7fdeb71");
              Token (Name "semgrep_var");
            |];
          |];
          Token (Name "pattern_struct");
          Token (Name "pattern_enum");
          Token (Name "pattern_tuple");
        |];
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
      |];
      Token (Literal "=>");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
    ];
  );
  "match_cases",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Seq [
          Token (Name "match_case");
          Token (Literal ",");
        ];
      );
      Opt (
        Token (Name "match_case");
      );
      Token (Literal "}");
    ];
  );
  "match_expression",
  Some (
    Seq [
      Token (Literal "match");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Name "match_cases");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      );
      Token (Literal ";");
    ];
  );
  "selector_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Token (Literal ".");
        Alt [|
          Token (Name "pat_7fdeb71");
          Token (Name "semgrep_var");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "tuple_expression");
          Token (Name "block");
          Token (Name "unary_expression");
          Token (Name "binary_expression");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Token (Name "selector_expression");
          Token (Name "call_expression");
          Token (Name "qualified_name");
          Alt [|
            Token (Name "true");
            Token (Name "false");
            Token (Name "number");
            Token (Name "string");
            Token (Name "unit");
          |];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
        Token (Literal ".");
        Token (Name "ellipsis");
      ];
    |];
  );
  "tuple_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "tuple_expression");
            Token (Name "block");
            Token (Name "unary_expression");
            Token (Name "binary_expression");
            Token (Name "if_expression");
            Token (Name "loop_expression");
            Token (Name "match_expression");
            Token (Name "selector_expression");
            Token (Name "call_expression");
            Token (Name "qualified_name");
            Alt [|
              Token (Name "true");
              Token (Name "false");
              Token (Name "number");
              Token (Name "string");
              Token (Name "unit");
            |];
            Token (Name "ellipsis");
            Token (Name "deep_ellipsis");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Literal "*");
        Token (Literal "-");
      |];
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
    ];
  );
  "parameter_list",
  Some (
    Seq [
      Token (Literal "(");
      Repeat (
        Seq [
          Token (Name "parameter_declaration");
          Token (Literal ",");
        ];
      );
      Opt (
        Token (Name "parameter_declaration");
      );
      Token (Literal ")");
    ];
  );
  "type_parameter_declaration",
  Some (
    Alt [|
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Token (Name "type_const_declaration");
      Token (Name "type_impl_declaration");
    |];
  );
  "member_declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Seq [
          Token (Name "member_declaration");
          Token (Literal ",");
        ];
      );
      Opt (
        Token (Name "member_declaration");
      );
      Token (Literal "}");
    ];
  );
  "semgrep_expression",
  Some (
    Seq [
      Token (Literal "__SEMGREP_EXPRESSION");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
    ];
  );
  "const_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "const");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Token (Literal ":");
      Alt [|
        Token (Name "type_tuple");
        Token (Name "unit_type");
        Token (Name "type_identifier");
      |];
      Token (Literal "=");
      Alt [|
        Token (Name "tuple_expression");
        Token (Name "block");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "if_expression");
        Token (Name "loop_expression");
        Token (Name "match_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "qualified_name");
        Alt [|
          Token (Name "true");
          Token (Name "false");
          Token (Name "number");
          Token (Name "string");
          Token (Name "unit");
        |];
        Token (Name "ellipsis");
        Token (Name "deep_ellipsis");
      |];
      Token (Literal ";");
    ];
  );
  "semgrep_statement",
  Some (
    Seq [
      Token (Literal "__SEMGREP_STATEMENT");
      Repeat1 (
        Alt [|
          Token (Name "let_statement");
          Token (Name "assignment_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "if_expression");
          Token (Name "loop_expression");
          Token (Name "match_expression");
          Seq [
            Alt [|
              Token (Name "tuple_expression");
              Token (Name "block");
              Token (Name "unary_expression");
              Token (Name "binary_expression");
              Token (Name "if_expression");
              Token (Name "loop_expression");
              Token (Name "match_expression");
              Token (Name "selector_expression");
              Token (Name "call_expression");
              Token (Name "qualified_name");
              Alt [|
                Token (Name "true");
                Token (Name "false");
                Token (Name "number");
                Token (Name "string");
                Token (Name "unit");
              |];
              Token (Name "ellipsis");
              Token (Name "deep_ellipsis");
            |];
            Token (Literal ";");
          ];
          Token (Name "ellipsis");
          Token (Name "deep_ellipsis");
        |];
      );
    ];
  );
  "type_parameter_list",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type_parameter_declaration");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_parameter_declaration");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "enum_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "enum");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Name "member_declaration_list");
    ];
  );
  "function_signature",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "fn");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Name "parameter_list");
      Opt (
        Seq [
          Token (Literal "->");
          Alt [|
            Token (Name "type_tuple");
            Token (Name "unit_type");
            Token (Name "type_identifier");
          |];
        ];
      );
    ];
  );
  "typealias_declaration",
  Some (
    Seq [
      Token (Literal "type");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Literal "=");
      Alt [|
        Token (Name "type_tuple");
        Token (Name "unit_type");
        Token (Name "type_identifier");
      |];
      Token (Literal ";");
    ];
  );
  "struct_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "struct");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Alt [|
        Token (Name "member_declaration_list");
        Token (Literal ";");
      |];
    ];
  );
  "trait_function",
  Some (
    Seq [
      Token (Name "function_signature");
      Alt [|
        Token (Name "block");
        Token (Literal ";");
      |];
    ];
  );
  "function_declaration",
  Some (
    Seq [
      Token (Name "function_signature");
      Token (Name "block");
    ];
  );
  "trait_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "trait_function");
      );
      Token (Literal "}");
    ];
  );
  "trait_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "trait");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Name "trait_body");
    ];
  );
  "impl_base",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "impl");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Name "impl_body");
    ];
  );
  "impl_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "import_declaration");
          Token (Name "module_declaration");
          Token (Name "typealias_declaration");
          Token (Name "const_declaration");
          Token (Name "trait_declaration");
          Token (Name "struct_declaration");
          Token (Name "enum_declaration");
          Alt [|
            Token (Name "impl_base");
            Token (Name "impl_trait");
          |];
          Token (Name "function_declaration");
          Token (Name "ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "impl_trait",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "impl");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Literal "of");
      Token (Name "qualified_name");
      Token (Name "impl_body");
    ];
  );
  "module_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "import_declaration");
          Token (Name "module_declaration");
          Token (Name "typealias_declaration");
          Token (Name "const_declaration");
          Token (Name "trait_declaration");
          Token (Name "struct_declaration");
          Token (Name "enum_declaration");
          Alt [|
            Token (Name "impl_base");
            Token (Name "impl_trait");
          |];
          Token (Name "function_declaration");
          Token (Name "ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "module_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_list");
      );
      Token (Literal "mod");
      Alt [|
        Token (Name "pat_7fdeb71");
        Token (Name "semgrep_var");
      |];
      Alt [|
        Token (Literal ";");
        Token (Name "module_body");
      |];
    ];
  );
  "source_file",
  Some (
    Alt [|
      Repeat (
        Alt [|
          Token (Name "import_declaration");
          Token (Name "module_declaration");
          Token (Name "typealias_declaration");
          Token (Name "const_declaration");
          Token (Name "trait_declaration");
          Token (Name "struct_declaration");
          Token (Name "enum_declaration");
          Alt [|
            Token (Name "impl_base");
            Token (Name "impl_trait");
          |];
          Token (Name "function_declaration");
          Token (Name "ellipsis");
        |];
      );
      Token (Name "semgrep_expression");
      Token (Name "semgrep_statement");
    |];
  );
]

let trans_integer ((kind, body) : mt) : CST.integer =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_modifier_ref ((kind, body) : mt) : CST.modifier_ref =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_binary ((kind, body) : mt) : CST.binary =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_wildcard ((kind, body) : mt) : CST.wildcard =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_hex ((kind, body) : mt) : CST.hex =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ellipsis ((kind, body) : mt) : CST.ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_modifier_mut ((kind, body) : mt) : CST.modifier_mut =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_7fdeb71 ((kind, body) : mt) : CST.pat_7fdeb71 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unit_ ((kind, body) : mt) : CST.unit_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unit_type ((kind, body) : mt) : CST.unit_type =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number_suffix ((kind, body) : mt) : CST.number_suffix =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_var ((kind, body) : mt) : CST.semgrep_var =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_octal ((kind, body) : mt) : CST.octal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false



let trans_path ((kind, body) : mt) : CST.path =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Pat_7fdeb71 (
                            trans_pat_7fdeb71 (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Semg_var (
                            trans_semgrep_var (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Int (
                  trans_integer (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Hex (
                  trans_hex (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Octal (
                  trans_octal (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin (
                  trans_binary (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_number_suffix (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_declaration ((kind, body) : mt) : CST.import_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_path (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Pat_7fdeb71 (
                            trans_pat_7fdeb71 (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Semg_var (
                            trans_semgrep_var (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_type_argument_list ((kind, body) : mt) : CST.type_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `True (
                  trans_true_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `False (
                  trans_false_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unit (
                  trans_unit_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `True (
                            trans_true_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `False (
                            trans_false_ (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Unit (
                            trans_unit_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_attribute_argument ((kind, body) : mt) : CST.attribute_argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_true (
            (match v with
            | Alt (0, v) ->
                `True (
                  trans_true_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `False (
                  trans_false_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unit (
                  trans_unit_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_pat_7fdeb71 (
            (match v with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Path_COLON_choice_true (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Path_COLON_attr_arg_list (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_attribute_argument_list (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_argument_list ((kind, body) : mt) : CST.attribute_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_argument (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_attribute_argument (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_qualified_name_segment ((kind, body) : mt) : CST.qualified_name_segment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_path (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_attribute_argument_list (Run.matcher_token v)
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_qualified_name ((kind, body) : mt) : CST.qualified_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_qualified_name_segment (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_argument_list (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_attribute_list ((kind, body) : mt) : CST.attribute_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat1
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_type_identifier ((kind, body) : mt) : CST.type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_qualified_name (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Type_tuple (
                            trans_type_tuple (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unit_type (
                            trans_unit_type (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Type_id (
                            trans_type_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_tuple (
                      trans_type_tuple (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Unit_type (
                      trans_unit_type (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Type_id (
                      trans_type_identifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_tuple ((kind, body) : mt) : CST.type_tuple =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Type_tuple (
                            trans_type_tuple (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unit_type (
                            trans_unit_type (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Type_id (
                            trans_type_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_tuple (
                      trans_type_tuple (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Unit_type (
                      trans_unit_type (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Type_id (
                      trans_type_identifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_pattern_enum ((kind, body) : mt) : CST.pattern_enum =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_qualified_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_wild (
                  (match v with
                  | Alt (0, v) ->
                      `Wild (
                        trans_wildcard (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_pat_7fdeb71 (
                        (match v with
                        | Alt (0, v) ->
                            `Pat_7fdeb71 (
                              trans_pat_7fdeb71 (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Semg_var (
                              trans_semgrep_var (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Pat_struct (
                  trans_pattern_struct (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Pat_enum (
                  trans_pattern_enum (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Pat_tuple (
                  trans_pattern_tuple (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Choice_wild (
                            (match v with
                            | Alt (0, v) ->
                                `Wild (
                                  trans_wildcard (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_pat_7fdeb71 (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Pat_7fdeb71 (
                                        trans_pat_7fdeb71 (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Semg_var (
                                        trans_semgrep_var (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Pat_struct (
                            trans_pattern_struct (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Pat_enum (
                            trans_pattern_enum (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Pat_tuple (
                            trans_pattern_tuple (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern_struct ((kind, body) : mt) : CST.pattern_struct =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_qualified_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_pat_7fdeb71 (
                  (match v with
                  | Alt (0, v) ->
                      `Pat_7fdeb71 (
                        trans_pat_7fdeb71 (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_var (
                        trans_semgrep_var (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_pat_7fdeb71_COLON_choice_choice_wild (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Pat_7fdeb71 (
                              trans_pat_7fdeb71 (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Semg_var (
                              trans_semgrep_var (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        (match v2 with
                        | Alt (0, v) ->
                            `Choice_wild (
                              (match v with
                              | Alt (0, v) ->
                                  `Wild (
                                    trans_wildcard (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Choice_pat_7fdeb71 (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pat_7fdeb71 (
                                          trans_pat_7fdeb71 (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Semg_var (
                                          trans_semgrep_var (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Pat_struct (
                              trans_pattern_struct (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Pat_enum (
                              trans_pattern_enum (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Pat_tuple (
                              trans_pattern_tuple (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Choice_pat_7fdeb71 (
                            (match v with
                            | Alt (0, v) ->
                                `Pat_7fdeb71 (
                                  trans_pat_7fdeb71 (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Semg_var (
                                  trans_semgrep_var (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Choice_pat_7fdeb71_COLON_choice_choice_wild (
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  (match v0 with
                                  | Alt (0, v) ->
                                      `Pat_7fdeb71 (
                                        trans_pat_7fdeb71 (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Semg_var (
                                        trans_semgrep_var (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                  ,
                                  Run.trans_token (Run.matcher_token v1),
                                  (match v2 with
                                  | Alt (0, v) ->
                                      `Choice_wild (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Wild (
                                              trans_wildcard (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Choice_pat_7fdeb71 (
                                              (match v with
                                              | Alt (0, v) ->
                                                  `Pat_7fdeb71 (
                                                    trans_pat_7fdeb71 (Run.matcher_token v)
                                                  )
                                              | Alt (1, v) ->
                                                  `Semg_var (
                                                    trans_semgrep_var (Run.matcher_token v)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Pat_struct (
                                        trans_pattern_struct (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Pat_enum (
                                        trans_pattern_enum (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Pat_tuple (
                                        trans_pattern_tuple (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern_tuple ((kind, body) : mt) : CST.pattern_tuple =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_wild (
                  (match v with
                  | Alt (0, v) ->
                      `Wild (
                        trans_wildcard (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_pat_7fdeb71 (
                        (match v with
                        | Alt (0, v) ->
                            `Pat_7fdeb71 (
                              trans_pat_7fdeb71 (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Semg_var (
                              trans_semgrep_var (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Pat_struct (
                  trans_pattern_struct (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Pat_enum (
                  trans_pattern_enum (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Pat_tuple (
                  trans_pattern_tuple (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Choice_wild (
                            (match v with
                            | Alt (0, v) ->
                                `Wild (
                                  trans_wildcard (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_pat_7fdeb71 (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Pat_7fdeb71 (
                                        trans_pat_7fdeb71 (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Semg_var (
                                        trans_semgrep_var (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Pat_struct (
                            trans_pattern_struct (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Pat_enum (
                            trans_pattern_enum (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Pat_tuple (
                            trans_pattern_tuple (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_parameter_declaration ((kind, body) : mt) : CST.parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep_choice_modi_ref_choice_pat_7fdeb71_COLON_choice_type_tuple (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Modi_ref (
                            trans_modifier_ref (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Modi_mut (
                            trans_modifier_mut (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `Pat_7fdeb71 (
                        trans_pat_7fdeb71 (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_var (
                        trans_semgrep_var (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v2),
                  (match v3 with
                  | Alt (0, v) ->
                      `Type_tuple (
                        trans_type_tuple (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Unit_type (
                        trans_unit_type (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Type_id (
                        trans_type_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_impl_declaration ((kind, body) : mt) : CST.type_impl_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Type_tuple (
                  trans_type_tuple (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unit_type (
                  trans_unit_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_id (
                  trans_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_const_declaration ((kind, body) : mt) : CST.type_const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Type_tuple (
                  trans_type_tuple (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unit_type (
                  trans_unit_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_id (
                  trans_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_member_declaration ((kind, body) : mt) : CST.member_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep_attr_list_choice_pat_7fdeb71_COLON_choice_type_tuple (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.repeat
                    (fun v -> trans_attribute_list (Run.matcher_token v))
                    v0
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `Pat_7fdeb71 (
                        trans_pat_7fdeb71 (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_var (
                        trans_semgrep_var (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v2),
                  (match v3 with
                  | Alt (0, v) ->
                      `Type_tuple (
                        trans_type_tuple (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Unit_type (
                        trans_unit_type (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Type_id (
                        trans_type_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let rec trans_argument_list ((kind, body) : mt) : CST.argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Tuple_exp (
                            trans_tuple_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Blk (
                            trans_block (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Un_exp (
                            trans_unary_expression (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Bin_exp (
                            trans_binary_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `If_exp (
                            trans_if_expression (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Loop_exp (
                            trans_loop_expression (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Match_exp (
                            trans_match_expression (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Sele_exp (
                            trans_selector_expression (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Call_exp (
                            trans_call_expression (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Qual_name (
                            trans_qualified_name (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Choice_true (
                            (match v with
                            | Alt (0, v) ->
                                `True (
                                  trans_true_ (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `False (
                                  trans_false_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Num (
                                  trans_number (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Str (
                                  trans_string_ (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Unit (
                                  trans_unit_ (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (11, v) ->
                          `Ellips (
                            trans_ellipsis (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Deep_ellips (
                            trans_deep_ellipsis (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Tuple_exp (
                      trans_tuple_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Blk (
                      trans_block (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Un_exp (
                      trans_unary_expression (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Bin_exp (
                      trans_binary_expression (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_exp (
                      trans_if_expression (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Loop_exp (
                      trans_loop_expression (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Match_exp (
                      trans_match_expression (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Sele_exp (
                      trans_selector_expression (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Call_exp (
                      trans_call_expression (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Qual_name (
                      trans_qualified_name (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Choice_true (
                      (match v with
                      | Alt (0, v) ->
                          `True (
                            trans_true_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `False (
                            trans_false_ (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Unit (
                            trans_unit_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (11, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Deep_ellips (
                      trans_deep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_statement ((kind, body) : mt) : CST.assignment_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_pat_7fdeb71 (
                  (match v with
                  | Alt (0, v) ->
                      `Pat_7fdeb71 (
                        trans_pat_7fdeb71 (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_var (
                        trans_semgrep_var (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_tuple_exp_choice_STAR_choice_tuple_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_tuple_exp_choice_PLUS_choice_tuple_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Choice_tuple_exp_choice_EQEQ_choice_tuple_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Choice_tuple_exp_AMPAMP_choice_tuple_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Choice_tuple_exp_BARBAR_choice_tuple_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Let_stmt (
                            trans_let_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Assign_stmt (
                            trans_assignment_statement (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Ret_stmt (
                            trans_return_statement (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Brk_stmt (
                            trans_break_statement (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `If_exp (
                            trans_if_expression (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Loop_exp (
                            trans_loop_expression (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Match_exp (
                            trans_match_expression (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Choice_tuple_exp_SEMI (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  (match v0 with
                                  | Alt (0, v) ->
                                      `Tuple_exp (
                                        trans_tuple_expression (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Blk (
                                        trans_block (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Un_exp (
                                        trans_unary_expression (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Bin_exp (
                                        trans_binary_expression (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `If_exp (
                                        trans_if_expression (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Loop_exp (
                                        trans_loop_expression (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Match_exp (
                                        trans_match_expression (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Sele_exp (
                                        trans_selector_expression (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `Call_exp (
                                        trans_call_expression (Run.matcher_token v)
                                      )
                                  | Alt (9, v) ->
                                      `Qual_name (
                                        trans_qualified_name (Run.matcher_token v)
                                      )
                                  | Alt (10, v) ->
                                      `Choice_true (
                                        (match v with
                                        | Alt (0, v) ->
                                            `True (
                                              trans_true_ (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `False (
                                              trans_false_ (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Num (
                                              trans_number (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Str (
                                              trans_string_ (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `Unit (
                                              trans_unit_ (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (11, v) ->
                                      `Ellips (
                                        trans_ellipsis (Run.matcher_token v)
                                      )
                                  | Alt (12, v) ->
                                      `Deep_ellips (
                                        trans_deep_ellipsis (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                  ,
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (8, v) ->
                          `Ellips (
                            trans_ellipsis (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Deep_ellips (
                            trans_deep_ellipsis (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Tuple_exp (
                      trans_tuple_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Blk (
                      trans_block (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Un_exp (
                      trans_unary_expression (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Bin_exp (
                      trans_binary_expression (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_exp (
                      trans_if_expression (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Loop_exp (
                      trans_loop_expression (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Match_exp (
                      trans_match_expression (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Sele_exp (
                      trans_selector_expression (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Call_exp (
                      trans_call_expression (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Qual_name (
                      trans_qualified_name (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Choice_true (
                      (match v with
                      | Alt (0, v) ->
                          `True (
                            trans_true_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `False (
                            trans_false_ (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Unit (
                            trans_unit_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (11, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Deep_ellips (
                      trans_deep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Tuple_exp (
                      trans_tuple_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Blk (
                      trans_block (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Un_exp (
                      trans_unary_expression (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Bin_exp (
                      trans_binary_expression (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_exp (
                      trans_if_expression (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Loop_exp (
                      trans_loop_expression (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Match_exp (
                      trans_match_expression (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Sele_exp (
                      trans_selector_expression (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Call_exp (
                      trans_call_expression (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Qual_name (
                      trans_qualified_name (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Choice_true (
                      (match v with
                      | Alt (0, v) ->
                          `True (
                            trans_true_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `False (
                            trans_false_ (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Unit (
                            trans_unit_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (11, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Deep_ellips (
                      trans_deep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deep_ellipsis ((kind, body) : mt) : CST.deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_expression ((kind, body) : mt) : CST.if_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (10, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_block (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `If_exp (
                            trans_if_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Blk (
                            trans_block (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_statement ((kind, body) : mt) : CST.let_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_modifier_mut (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Choice_wild (
                  (match v with
                  | Alt (0, v) ->
                      `Wild (
                        trans_wildcard (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_pat_7fdeb71 (
                        (match v with
                        | Alt (0, v) ->
                            `Pat_7fdeb71 (
                              trans_pat_7fdeb71 (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Semg_var (
                              trans_semgrep_var (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Pat_struct (
                  trans_pattern_struct (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Pat_enum (
                  trans_pattern_enum (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Pat_tuple (
                  trans_pattern_tuple (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_tuple (
                            trans_type_tuple (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unit_type (
                            trans_unit_type (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Type_id (
                            trans_type_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            (match v5 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_loop_expression ((kind, body) : mt) : CST.loop_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_case ((kind, body) : mt) : CST.match_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_choice_wild (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_wild (
                        (match v with
                        | Alt (0, v) ->
                            `Wild (
                              trans_wildcard (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Choice_pat_7fdeb71 (
                              (match v with
                              | Alt (0, v) ->
                                  `Pat_7fdeb71 (
                                    trans_pat_7fdeb71 (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Semg_var (
                                    trans_semgrep_var (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Pat_struct (
                        trans_pattern_struct (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Pat_enum (
                        trans_pattern_enum (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Pat_tuple (
                        trans_pattern_tuple (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_cases ((kind, body) : mt) : CST.match_cases =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_match_case (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_match_case (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_expression ((kind, body) : mt) : CST.match_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_match_cases (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Tuple_exp (
                      trans_tuple_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Blk (
                      trans_block (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Un_exp (
                      trans_unary_expression (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Bin_exp (
                      trans_binary_expression (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_exp (
                      trans_if_expression (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Loop_exp (
                      trans_loop_expression (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Match_exp (
                      trans_match_expression (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Sele_exp (
                      trans_selector_expression (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Call_exp (
                      trans_call_expression (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Qual_name (
                      trans_qualified_name (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Choice_true (
                      (match v with
                      | Alt (0, v) ->
                          `True (
                            trans_true_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `False (
                            trans_false_ (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Unit (
                            trans_unit_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (11, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Deep_ellips (
                      trans_deep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_selector_expression ((kind, body) : mt) : CST.selector_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_tuple_exp_DOT_choice_pat_7fdeb71 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Pat_7fdeb71 (
                        trans_pat_7fdeb71 (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_var (
                        trans_semgrep_var (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_tuple_exp_DOT_ellips (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Tuple_exp (
                        trans_tuple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Un_exp (
                        trans_unary_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Bin_exp (
                        trans_binary_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Sele_exp (
                        trans_selector_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Qual_name (
                        trans_qualified_name (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_true (
                        (match v with
                        | Alt (0, v) ->
                            `True (
                              trans_true_ (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `False (
                              trans_false_ (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Num (
                              trans_number (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Unit (
                              trans_unit_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (11, v) ->
                      `Ellips (
                        trans_ellipsis (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Deep_ellips (
                        trans_deep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_ellipsis (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_expression ((kind, body) : mt) : CST.tuple_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Tuple_exp (
                            trans_tuple_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Blk (
                            trans_block (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Un_exp (
                            trans_unary_expression (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Bin_exp (
                            trans_binary_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `If_exp (
                            trans_if_expression (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Loop_exp (
                            trans_loop_expression (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Match_exp (
                            trans_match_expression (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Sele_exp (
                            trans_selector_expression (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Call_exp (
                            trans_call_expression (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Qual_name (
                            trans_qualified_name (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Choice_true (
                            (match v with
                            | Alt (0, v) ->
                                `True (
                                  trans_true_ (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `False (
                                  trans_false_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Num (
                                  trans_number (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Str (
                                  trans_string_ (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Unit (
                                  trans_unit_ (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (11, v) ->
                          `Ellips (
                            trans_ellipsis (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Deep_ellips (
                            trans_deep_ellipsis (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_parameter_list ((kind, body) : mt) : CST.parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_parameter_declaration (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_parameter_declaration (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_parameter_declaration ((kind, body) : mt) : CST.type_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_pat_7fdeb71 (
            (match v with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Type_const_decl (
            trans_type_const_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Type_impl_decl (
            trans_type_impl_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_member_declaration_list ((kind, body) : mt) : CST.member_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_member_declaration (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_member_declaration (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_semgrep_expression ((kind, body) : mt) : CST.semgrep_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_const_declaration ((kind, body) : mt) : CST.const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Type_tuple (
                  trans_type_tuple (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unit_type (
                  trans_unit_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_id (
                  trans_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v5),
            (match v6 with
            | Alt (0, v) ->
                `Tuple_exp (
                  trans_tuple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Qual_name (
                  trans_qualified_name (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_true (
                  (match v with
                  | Alt (0, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Unit (
                        trans_unit_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Deep_ellips (
                  trans_deep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_statement ((kind, body) : mt) : CST.semgrep_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Let_stmt (
                      trans_let_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Assign_stmt (
                      trans_assignment_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `If_exp (
                      trans_if_expression (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Loop_exp (
                      trans_loop_expression (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Match_exp (
                      trans_match_expression (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Choice_tuple_exp_SEMI (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Tuple_exp (
                                  trans_tuple_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Blk (
                                  trans_block (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Un_exp (
                                  trans_unary_expression (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Bin_exp (
                                  trans_binary_expression (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `If_exp (
                                  trans_if_expression (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Loop_exp (
                                  trans_loop_expression (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Match_exp (
                                  trans_match_expression (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Sele_exp (
                                  trans_selector_expression (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Call_exp (
                                  trans_call_expression (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Qual_name (
                                  trans_qualified_name (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Choice_true (
                                  (match v with
                                  | Alt (0, v) ->
                                      `True (
                                        trans_true_ (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `False (
                                        trans_false_ (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Num (
                                        trans_number (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Str (
                                        trans_string_ (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Unit (
                                        trans_unit_ (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (11, v) ->
                                `Ellips (
                                  trans_ellipsis (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `Deep_ellips (
                                  trans_deep_ellipsis (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.trans_token (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (8, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Deep_ellips (
                      trans_deep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_type_parameter_list ((kind, body) : mt) : CST.type_parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter_declaration (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_parameter_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_enum_declaration ((kind, body) : mt) : CST.enum_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v3
            ,
            trans_member_declaration_list (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_signature ((kind, body) : mt) : CST.function_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v3
            ,
            trans_parameter_list (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_tuple (
                            trans_type_tuple (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unit_type (
                            trans_unit_type (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Type_id (
                            trans_type_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_typealias_declaration ((kind, body) : mt) : CST.typealias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Type_tuple (
                  trans_type_tuple (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unit_type (
                  trans_unit_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_id (
                  trans_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_struct_declaration ((kind, body) : mt) : CST.struct_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Member_decl_list (
                  trans_member_declaration_list (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_trait_function ((kind, body) : mt) : CST.trait_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_function_signature (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_function_signature (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_trait_body ((kind, body) : mt) : CST.trait_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_trait_function (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_trait_declaration ((kind, body) : mt) : CST.trait_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v3
            ,
            trans_trait_body (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_impl_base ((kind, body) : mt) : CST.impl_base =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v3
            ,
            trans_impl_body (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_impl_body ((kind, body) : mt) : CST.impl_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Import_decl (
                      trans_import_declaration (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Module_decl (
                      trans_module_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Typeas_decl (
                      trans_typealias_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Struct_decl (
                      trans_struct_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Choice_impl_base (
                      (match v with
                      | Alt (0, v) ->
                          `Impl_base (
                            trans_impl_base (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Impl_trait (
                            trans_impl_trait (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (8, v) ->
                    `Func_decl (
                      trans_function_declaration (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_impl_trait ((kind, body) : mt) : CST.impl_trait =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            trans_qualified_name (Run.matcher_token v5),
            trans_impl_body (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_body ((kind, body) : mt) : CST.module_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Import_decl (
                      trans_import_declaration (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Module_decl (
                      trans_module_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Typeas_decl (
                      trans_typealias_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Struct_decl (
                      trans_struct_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Choice_impl_base (
                      (match v with
                      | Alt (0, v) ->
                          `Impl_base (
                            trans_impl_base (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Impl_trait (
                            trans_impl_trait (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (8, v) ->
                    `Func_decl (
                      trans_function_declaration (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_declaration ((kind, body) : mt) : CST.module_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute_list (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat_7fdeb71 (
                  trans_pat_7fdeb71 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_var (
                  trans_semgrep_var (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Module_body (
                  trans_module_body (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep_choice_import_decl (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Import_decl (
                      trans_import_declaration (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Module_decl (
                      trans_module_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Typeas_decl (
                      trans_typealias_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Const_decl (
                      trans_const_declaration (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Trait_decl (
                      trans_trait_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Struct_decl (
                      trans_struct_declaration (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Choice_impl_base (
                      (match v with
                      | Alt (0, v) ->
                          `Impl_base (
                            trans_impl_base (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Impl_trait (
                            trans_impl_trait (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (8, v) ->
                    `Func_decl (
                      trans_function_declaration (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v
          )
      | Alt (1, v) ->
          `Semg_exp (
            trans_semgrep_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Semg_stmt (
            trans_semgrep_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_source_file

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

